#version 450

#include "utils.glsl"

// compute shader of a tonemap

layout(local_size_x = 8, local_size_y = 8) in;

layout(binding = 0) uniform sampler2D in_color;
layout(rgba8, binding = 1) uniform writeonly image2D out_color;

uniform float exposure = 1.0;

float reinhard(float hdr) {
    return hdr / (hdr + 1.0);
}

vec3 reinhard(vec3 x) {
    return vec3(reinhard(x.x), reinhard(x.y), reinhard(x.z));
}

void main() {
    const ivec2 coord = ivec2(gl_GlobalInvocationID.xy);

    const vec3 hdr = texelFetch(in_color, coord, 0).rgb * exposure;
    const vec3 tone_mapped = reinhard(hdr);

    imageStore(out_color, coord, vec4(linear_to_sRGB(hdr), 1.0));
}

